
-- Шаг 1 
-- Узнаем, когда была первая транзакция для каждого студента. Начиная с этой даты, мы будем собирать его баланс уроков. 

with first_payments as (
    select user_id, 
       date_trunc('day', min(transaction_datetime)) as first_payment_date 
from skyeng_db.payments
    where status_name = 'success'
group by user_id 
order by first_payment_date),

-- Шаг 2
-- Соберем таблицу с датами за каждый календарный день 2016 года.

all_dates as (
    select date_trunc('day', class_start_datetime) as dt
from skyeng_db.classes
    where date_trunc('year', class_start_datetime) = '2016-01-01'
group by dt 
order by dt),

-- Шаг 3 Узнаем, за какие даты имеет смысл собирать баланс для каждого студента.

all_dates_by_user as (
    select user_id, dt
from all_dates as ad
   join first_payments as fp
        ON fp.first_payment_date <= ad.dt),

--  Шаг 4
-- Найдем все изменения балансов, связанные с успешными транзакциями. 

payments_by_dates as (
select user_id
    , date_trunc('day', transaction_datetime) as payment_date
    , sum(classes) as transaction_balance_change 
from skyeng_db.payments
    where status_name = 'success'
group by user_id, payment_date
order by user_id),

--  Шаг 5
-- Найдем баланс студентов, который сформирован только транзакциями.

payments_by_dates_cumsum as (
select distinct all_dates_by_user.user_id
        , dt
        , transaction_balance_change
        , sum(coalesce(transaction_balance_change,0)) over (partition by all_dates_by_user.user_id order by dt ) as transaction_balance_change_cs
from all_dates_by_user
    left join payments_by_dates
        on all_dates_by_user.user_id = payments_by_dates.user_id
        and all_dates_by_user.dt = payments_by_dates.payment_date
order by user_id), 

--  Шаг 6
-- Найдем изменения балансов из-за прохождения уроков. 

classes_by_dates as (
select user_id
     , date_trunc('day', class_start_datetime) as class_date
     , count(distinct id_class)*-1 as classes
from skyeng_db.classes
where class_type != 'trial'
    and class_status in ('success' , 'failed_by_student')
group by user_id, class_date),

-- Шаг 7
-- По аналогии с уже проделанным шагом для оплат создадим CTE для хранения кумулятивной суммы количества пройденных уроков. 

classes_by_dates_dates_cumsum as (
select distinct all_dates_by_user.user_id
        , dt
        , classes
        , sum(coalesce(classes,0)) over (partition by all_dates_by_user.user_id order by dt ) as classes_cs
from all_dates_by_user
    left join classes_by_dates
        on all_dates_by_user.user_id = classes_by_dates.user_id
        and all_dates_by_user.dt = classes_by_dates.class_date
order by user_id),

-- Шаг 8
-- Создадим CTE `balances` с вычисленными балансами каждого студента. 

balances as (
select payments_by_dates_cumsum.user_id
     , payments_by_dates_cumsum.dt
     , transaction_balance_change
     , transaction_balance_change_cs
     , classes
     , classes_cs
     , classes_cs + transaction_balance_change_cs as balance
from payments_by_dates_cumsum
     join classes_by_dates_dates_cumsum
        on payments_by_dates_cumsum.user_id = classes_by_dates_dates_cumsum.user_id
        and payments_by_dates_cumsum.dt = classes_by_dates_dates_cumsum.dt)



--Задание 1.Выберите топ-1000 строк из CTE `balances` с сортировкой по `user_id` и `dt`.

-- select * 
-- from balances
-- order by user_id, dt
-- limit 1000

--Задание 2. Как менялось общее количество уроков на балансах студентов.

select dt
    , sum(transaction_balance_change) as sum_t
    , sum(transaction_balance_change_cs) as sum_t_cs
    , sum(classes) as sum_c
    , sum(classes_cs) as sum_c_cs
    , sum(balance) as sum_b
from balances
group by dt
order by dt